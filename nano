<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Miranda - Creative Intelligence Platform</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0f0f0f;
            color: #e5e5e5;
            height: 100vh;
            overflow: hidden;
        }

        .app-container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 300px;
            background: #171717;
            border-right: 1px solid #2a2a2a;
            display: flex;
            flex-direction: column;
            padding: 20px;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #0f0f0f;
        }

        .header {
            padding: 20px;
            border-bottom: 1px solid #2a2a2a;
            background: #171717;
        }

        .project-selector {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .project-selector select {
            flex: 1;
            padding: 8px 12px;
            background: #2a2a2a;
            border: 1px solid #404040;
            border-radius: 6px;
            color: #e5e5e5;
            font-size: 14px;
        }

        .btn {
            padding: 8px 16px;
            background: #0969da;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s;
        }

        .btn:hover {
            background: #0860ca;
        }

        .btn-secondary {
            background: #2a2a2a;
            border: 1px solid #404040;
        }

        .btn-secondary:hover {
            background: #404040;
        }

        .tabs {
            display: flex;
            background: #171717;
            border-bottom: 1px solid #2a2a2a;
        }

        .tab {
            padding: 16px 24px;
            background: transparent;
            border: none;
            color: #8b8b8b;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }

        .tab.active {
            color: #e5e5e5;
            border-bottom-color: #0969da;
        }

        .tab:hover {
            color: #e5e5e5;
            background: #2a2a2a;
        }

        .tab-content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .tool-workspace {
            max-width: 800px;
            margin: 0 auto;
        }

        .tool-controls {
            background: #171717;
            border: 1px solid #2a2a2a;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .control-group {
            margin-bottom: 16px;
        }

        .control-group:last-child {
            margin-bottom: 0;
        }

        .control-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #e5e5e5;
        }

        .input-group {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            background: #2a2a2a;
            border: 1px solid #404040;
            border-radius: 6px;
            color: #e5e5e5;
            font-size: 14px;
        }

        .form-control::placeholder {
            color: #8b8b8b;
        }

        .toggle-panel {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 16px;
        }

        .toggle-section {
            background: #2a2a2a;
            border-radius: 6px;
            padding: 12px;
        }

        .toggle-section h4 {
            margin-bottom: 8px;
            color: #e5e5e5;
            font-size: 14px;
        }

        .toggle-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 6px 0;
            border-bottom: 1px solid #404040;
        }

        .toggle-item:last-child {
            border-bottom: none;
        }

        .toggle-item label {
            color: #e5e5e5;
            cursor: pointer;
            font-size: 13px;
        }

        .toggle-switch {
            position: relative;
            width: 36px;
            height: 20px;
            background: #404040;
            border-radius: 10px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .toggle-switch.active {
            background: #0969da;
        }

        .toggle-switch::after {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 16px;
            height: 16px;
            background: white;
            border-radius: 50%;
            transition: transform 0.2s;
        }

        .toggle-switch.active::after {
            transform: translateX(16px);
        }

        .results-area {
            background: #171717;
            border: 1px solid #2a2a2a;
            border-radius: 8px;
            padding: 20px;
            min-height: 300px;
            margin-top: 20px;
        }

        .results-content {
            color: #e5e5e5;
            line-height: 1.6;
            white-space: pre-wrap;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .messages-area {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: #0f0f0f;
        }

        .message {
            margin-bottom: 20px;
            max-width: 800px;
        }

        .message.user {
            margin-left: auto;
        }

        .message-content {
            padding: 12px 16px;
            border-radius: 18px;
            background: #2a2a2a;
            color: #e5e5e5;
            line-height: 1.4;
        }

        .message.user .message-content {
            background: #0969da;
            color: white;
        }

        .chat-input-area {
            padding: 20px;
            border-top: 1px solid #2a2a2a;
            background: #171717;
        }

        .chat-input-container {
            display: flex;
            gap: 10px;
            align-items: flex-end;
            max-width: 800px;
            margin: 0 auto;
        }

        .chat-input {
            flex: 1;
            padding: 12px 16px;
            background: #2a2a2a;
            border: 1px solid #404040;
            border-radius: 20px;
            color: #e5e5e5;
            resize: none;
            min-height: 44px;
            max-height: 120px;
            font-family: inherit;
            font-size: 14px;
        }

        .send-btn {
            width: 44px;
            height: 44px;
            background: #0969da;
            border: none;
            border-radius: 50%;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
        }

        .send-btn:hover {
            background: #0860ca;
        }

        .send-btn:disabled {
            background: #404040;
            cursor: not-allowed;
        }

        .sources-panel {
            margin-bottom: 20px;
        }

        .sources-title {
            margin-bottom: 12px;
            color: #e5e5e5;
            font-weight: 500;
        }

        .sources-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
        }

        .status-indicator {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            background: #171717;
            border: 1px solid #2a2a2a;
            border-radius: 6px;
            font-size: 12px;
            color: #8b8b8b;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #dc3545;
        }

        .status-dot.connected {
            background: #28a745;
        }

        .data-upload-area {
            border: 2px dashed #404040;
            border-radius: 8px;
            padding: 40px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            transition: border-color 0.2s;
        }

        .data-upload-area:hover {
            border-color: #0969da;
        }

        .data-upload-area.dragover {
            border-color: #0969da;
            background: rgba(9, 105, 218, 0.1);
        }

        .file-list {
            background: #171717;
            border: 1px solid #2a2a2a;
            border-radius: 8px;
            max-height: 300px;
            overflow-y: auto;
        }

        .file-item {
            padding: 12px 16px;
            border-bottom: 1px solid #2a2a2a;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .file-item:last-child {
            border-bottom: none;
        }

        .file-info {
            color: #e5e5e5;
        }

        .file-meta {
            color: #8b8b8b;
            font-size: 12px;
        }

        .hidden {
            display: none !important;
        }

        /* Loading states */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #404040;
            border-radius: 50%;
            border-top-color: #0969da;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .sidebar {
                width: 280px;
            }
            
            .toggle-panel {
                grid-template-columns: 1fr;
            }
            
            .sources-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="project-selector">
                <select id="projectSelect">
                    <option value="">Select project...</option>
                </select>
                <button class="btn btn-secondary" onclick="refreshProjects()">🔄</button>
                <button class="btn" onclick="createProject()">New</button>
            </div>

            <div class="sources-panel">
                <div class="sources-title">Data Sources</div>
                <div class="sources-grid">
                    <div class="toggle-section">
                        <h4>📄 Documents</h4>
                        <div id="documentSources"></div>
                        <button class="btn btn-secondary" style="width: 100%; margin-top: 8px; font-size: 12px;" onclick="toggleAllDocuments()">Toggle All</button>
                    </div>
                    <div class="toggle-section">
                        <h4>📊 Tables</h4>
                        <div id="tableSources"></div>
                        <button class="btn btn-secondary" style="width: 100%; margin-top: 8px; font-size: 12px;" onclick="toggleAllTables()">Toggle All</button>
                    </div>
                </div>
            </div>

            <div style="margin-top: auto; padding-top: 20px;">
                <div style="font-size: 12px; color: #8b8b8b; margin-bottom: 8px;">Settings</div>
                <div style="margin-bottom: 12px;">
                    <label style="font-size: 12px; color: #8b8b8b;">Tone</label>
                    <select id="toneSelect" class="form-control" style="font-size: 12px; padding: 6px;">
                        <option value="professional">Professional</option>
                        <option value="creative">Creative</option>
                        <option value="casual">Casual</option>
                        <option value="academic">Academic</option>
                    </select>
                </div>
                <div>
                    <label style="font-size: 12px; color: #8b8b8b;">Length</label>
                    <select id="lengthSelect" class="form-control" style="font-size: 12px; padding: 6px;">
                        <option value="short">Short</option>
                        <option value="medium">Medium</option>
                        <option value="long">Long</option>
                        <option value="detailed">Detailed</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <div class="header">
                <h1 style="font-size: 20px; font-weight: 600;">Miranda Creative Intelligence</h1>
            </div>

            <!-- Tabs -->
            <div class="tabs">
                <button class="tab active" onclick="switchTab('chat')">💬 Chat</button>
                <button class="tab" onclick="switchTab('brainstorm')">🧠 Brainstorm</button>
                <button class="tab" onclick="switchTab('write')">✍️ Write</button>
                <button class="tab" onclick="switchTab('edit')">📝 Edit</button>
                <button class="tab" onclick="switchTab('data')">📊 Data</button>
            </div>

            <!-- Tab Content -->
            <div class="tab-content">
                <!-- Chat Tab -->
                <div id="chatTab" class="chat-container">
                    <div class="messages-area" id="messagesArea">
                        <div class="message">
                            <div class="message-content">
                                👋 Hello! I'm Miranda, your creative intelligence assistant. I can help you brainstorm ideas, write content, and analyze your data. What would you like to work on today?
                            </div>
                        </div>
                    </div>
                    <div class="chat-input-area">
                        <div class="chat-input-container">
                            <textarea id="chatInput" class="chat-input" placeholder="Type your message..." rows="1"></textarea>
                            <button id="sendBtn" class="send-btn" onclick="sendMessage()">↑</button>
                        </div>
                    </div>
                </div>

                <!-- Brainstorm Tab -->
                <div id="brainstormTab" class="tool-workspace hidden">
                    <div class="tool-controls">
                        <div class="control-group">
                            <label class="control-label">Project</label>
                            <div class="input-group">
                                <select id="brainstormProjectSelect" class="form-control">
                                    <option value="">Select project...</option>
                                </select>
                                <button class="btn btn-secondary" onclick="refreshToolProjects('brainstorm')">🔄</button>
                            </div>
                        </div>
                        
                        <div class="toggle-panel">
                            <div class="toggle-section">
                                <h4>📄 Documents</h4>
                                <div id="brainstormDocuments"></div>
                            </div>
                            <div class="toggle-section">
                                <h4>📊 Tables</h4>
                                <div id="brainstormTables"></div>
                            </div>
                        </div>

                        <div class="control-group">
                            <label class="control-label">Topic for Brainstorming</label>
                            <input type="text" id="brainstormTopic" class="form-control" placeholder="Enter topic or focus area...">
                        </div>

                        <button class="btn" onclick="generateBrainstorm()" style="width: 100%;">
                            🧠 Generate Ideas
                        </button>
                    </div>

                    <div class="results-area">
                        <div class="results-content" id="brainstormResults">Your brainstorming ideas will appear here...</div>
                    </div>
                </div>

                <!-- Write Tab -->
                <div id="writeTab" class="tool-workspace hidden">
                    <div class="tool-controls">
                        <div class="control-group">
                            <label class="control-label">Project</label>
                            <div class="input-group">
                                <select id="writeProjectSelect" class="form-control">
                                    <option value="">Select project...</option>
                                </select>
                                <button class="btn btn-secondary" onclick="refreshToolProjects('write')">🔄</button>
                            </div>
                        </div>
                        
                        <div class="toggle-panel">
                            <div class="toggle-section">
                                <h4>📄 Documents</h4>
                                <div id="writeDocuments"></div>
                            </div>
                            <div class="toggle-section">
                                <h4>📊 Tables</h4>
                                <div id="writeTables"></div>
                            </div>
                        </div>

                        <div class="control-group">
                            <label class="control-label">Writing Prompt</label>
                            <textarea id="writePrompt" class="form-control" rows="3" placeholder="Describe what you want to write..."></textarea>
                        </div>

                        <button class="btn" onclick="generateWrite()" style="width: 100%;">
                            ✍️ Generate Content
                        </button>
                    </div>

                    <div class="results-area">
                        <div class="results-content" id="writeResults">Your generated content will appear here...</div>
                    </div>
                </div>

                <!-- Edit Tab -->
                <div id="editTab" class="tool-workspace hidden">
                    <div class="tool-controls">
                        <div class="control-group">
                            <label class="control-label">Project</label>
                            <div class="input-group">
                                <select id="editProjectSelect" class="form-control">
                                    <option value="">Select project...</option>
                                </select>
                                <button class="btn btn-secondary" onclick="refreshToolProjects('edit')">🔄</button>
                            </div>
                        </div>
                        
                        <div class="toggle-panel">
                            <div class="toggle-section">
                                <h4>📄 Documents</h4>
                                <div id="editDocuments"></div>
                            </div>
                            <div class="toggle-section">
                                <h4>📊 Tables</h4>
                                <div id="editTables"></div>
                            </div>
                        </div>

                        <div class="control-group">
                            <label class="control-label">Content to Edit</label>
                            <textarea id="editContent" class="form-control" rows="6" placeholder="Paste your content here to improve it..."></textarea>
                        </div>

                        <button class="btn" onclick="generateEdit()" style="width: 100%;">
                            📝 Edit & Improve
                        </button>
                    </div>

                    <div class="results-area">
                        <div class="results-content" id="editResults">Your improved content will appear here...</div>
                    </div>
                </div>

                <!-- Data Tab -->
                <div id="dataTab" class="tool-workspace hidden">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <!-- Documents Section -->
                        <div>
                            <h3 style="margin-bottom: 16px; color: #e5e5e5;">📄 Documents</h3>
                            <div class="control-group">
                                <label class="control-label">Bucket Name</label>
                                <div class="input-group">
                                    <input type="text" id="bucketName" class="form-control" placeholder="e.g., research, references">
                                    <button class="btn" onclick="createBucket()">Create Bucket</button>
                                </div>
                            </div>
                            
                            <div class="data-upload-area" onclick="document.getElementById('documentUpload').click()">
                                <div style="color: #8b8b8b; margin-bottom: 8px;">📄 Upload Documents</div>
                                <div style="font-size: 12px; color: #6b6b6b;">Click or drag files here (PDF, TXT, DOCX)</div>
                                <input type="file" id="documentUpload" multiple accept=".pdf,.txt,.docx" style="display: none;" onchange="handleDocumentUpload(event)">
                            </div>

                            <div class="file-list" id="documentList">
                                <div class="file-item">
                                    <div style="color: #8b8b8b; text-align: center; padding: 20px;">No documents uploaded</div>
                                </div>
                            </div>
                        </div>

                        <!-- Tables Section -->
                        <div>
                            <h3 style="margin-bottom: 16px; color: #e5e5e5;">📊 Tables</h3>
                            <div class="control-group">
                                <label class="control-label">Table Name</label>
                                <div class="input-group">
                                    <input type="text" id="tableName" class="form-control" placeholder="e.g., characters, data">
                                    <button class="btn" onclick="uploadCSV()">Upload CSV</button>
                                </div>
                            </div>

                            <input type="file" id="csvUpload" accept=".csv" style="display: none;" onchange="handleCSVUpload(event)">

                            <div class="file-list" id="tableList">
                                <div class="file-item">
                                    <div style="color: #8b8b8b; text-align: center; padding: 20px;">No tables uploaded</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Indicator -->
    <div class="status-indicator">
        <span class="status-dot" id="statusDot"></span>
        <span id="statusText">Backend</span>
    </div>

    <script>
        // Global state
        let currentProject = '';
        let selectedSources = {
            documents: new Set(),
            tables: new Set()
        };
        let projects = [];
        let projectBuckets = {};
        let projectTables = {};

        // API Base URL
        const API_BASE = 'http://127.0.0.1:8000';

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Miranda GUI initialized');
            checkBackendStatus();
            loadProjects();
            
            // Auto-resize chat input
            const chatInput = document.getElementById('chatInput');
            chatInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });

            // Chat input enter handling
            chatInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        });

        // Backend status check
        async function checkBackendStatus() {
            try {
                console.log('Checking backend status...');
                const response = await fetch(`${API_BASE}/healthcheck`);
                const statusDot = document.getElementById('statusDot');
                const statusText = document.getElementById('statusText');
                
                if (response.ok) {
                    statusDot.classList.add('connected');
                    statusText.textContent = 'Connected';
                    console.log('✅ Backend connected');
                } else {
                    statusDot.classList.remove('connected');
                    statusText.textContent = 'Error';
                    console.log('❌ Backend error:', response.status);
                }
            } catch (error) {
                console.log('❌ Backend connection failed:', error);
                const statusDot = document.getElementById('statusDot');
                const statusText = document.getElementById('statusText');
                statusDot.classList.remove('connected');
                statusText.textContent = 'Offline';
            }
        }

        // Load projects from API
        async function loadProjects() {
            try {
                console.log('Loading projects...');
                const response = await fetch(`${API_BASE}/projects/projects`);
                console.log('Projects response status:', response.status);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('Raw projects data:', data);
                    
                    // Handle both formats: {projects: [...]} or just [...]
                    let projectList;
                    if (data && typeof data === 'object' && data.projects) {
                        console.log('Found data.projects array:', data.projects);
                        projectList = data.projects;
                    } else if (Array.isArray(data)) {
                        console.log('Data is direct array:', data);
                        projectList = data;
                    } else {
                        console.log('Unexpected data format:', typeof data, data);
                        projectList = [];
                    }
                    
                    console.log('Final project list:', projectList);
                    projects = projectList;
                    populateProjectDropdowns();
                } else {
                    console.error('Failed to load projects:', response.status, response.statusText);
                    showError('Failed to load projects');
                }
            } catch (error) {
                console.error('Error loading projects:', error);
                showError('Error loading projects: ' + error.message);
            }
        }

        // Populate all project dropdowns
        function populateProjectDropdowns() {
            console.log('Populating dropdowns with projects:', projects);
            
            const dropdowns = [
                'projectSelect',
                'brainstormProjectSelect', 
                'writeProjectSelect',
                'editProjectSelect'
            ];
            
            dropdowns.forEach(dropdownId => {
                const dropdown = document.getElementById(dropdownId);
                if (!dropdown) {
                    console.warn('Dropdown not found:', dropdownId);
                    return;
                }
                
                // Clear existing options except first
                dropdown.innerHTML = '<option value="">Select project...</option>';
                
                console.log(`Populating ${dropdownId} with ${projects.length} projects`);
                
                projects.forEach(project => {
                    const option = document.createElement('option');
                    option.value = project;
                    option.textContent = project;
                    dropdown.appendChild(option);
                    console.log(`Added project "${project}" to ${dropdownId}`);
                });
            });
            
            // Set first project as selected if available
            if (projects.length > 0) {
                const firstProject = projects[0];
                document.getElementById('projectSelect').value = firstProject;
                currentProject = firstProject;
                console.log('Set current project to:', firstProject);
                loadProjectData(firstProject);
            }
        }

        // Test function for debugging
        async function testProjectAPI() {
            console.log('=== TESTING PROJECT API ===');
            try {
                const response = await fetch(`${API_BASE}/projects/projects`);
                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);
                
                const data = await response.json();
                console.log('Response data type:', typeof data);
                console.log('Response data:', data);
                
                if (data && data.projects) {
                    console.log('Found projects array:', data.projects);
                    console.log('Projects count:', data.projects.length);
                } else if (Array.isArray(data)) {
                    console.log('Data is array:', data);
                    console.log('Array length:', data.length);
                } else {
                    console.log('Unexpected format');
                }
            } catch (error) {
                console.error('Test failed:', error);
            }
        }

        // Check dropdown population
        function checkDropdown() {
            console.log('=== CHECKING DROPDOWN ===');
            const dropdown = document.getElementById('projectSelect');
            console.log('Dropdown element:', dropdown);
            console.log('Dropdown options count:', dropdown.options.length);
            
            for (let i = 0; i < dropdown.options.length; i++) {
                const option = dropdown.options[i];
                console.log(`Option ${i}: value="${option.value}" text="${option.textContent}"`);
            }
        }

        // Refresh projects
        async function refreshProjects() {
            console.log('Refreshing projects...');
            await loadProjects();
        }

        // Refresh tool-specific projects
        async function refreshToolProjects(tool) {
            console.log(`Refreshing ${tool} projects...`);
            await loadProjects();
        }

        // Create new project
        async function createProject() {
            const name = prompt('Enter project name:');
            if (!name) return;
            
            try {
                console.log('Creating project:', name);
                const response = await fetch(`${API_BASE}/projects/projects/new`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name: name })
                });
                
                if (response.ok) {
                    console.log('✅ Project created successfully');
                    await loadProjects();
                    
                    // Select the new project
                    document.getElementById('projectSelect').value = name;
                    currentProject = name;
                    loadProjectData(name);
                } else {
                    const errorText = await response.text();
                    console.error('❌ Failed to create project:', response.status, errorText);
                    showError('Failed to create project: ' + response.status);
                }
            } catch (error) {
                console.error('❌ Error creating project:', error);
                showError('Error creating project: ' + error.message);
            }
        }

        // Load project data (buckets and tables)
        async function loadProjectData(projectName) {
            if (!projectName) return;
            
            console.log('Loading data for project:', projectName);
            currentProject = projectName;
            
            // Load buckets and tables
            await Promise.all([
                loadProjectBuckets(projectName),
                loadProjectTables(projectName)
            ]);
            
            updateSourceToggles();
        }

        // Load project buckets
        async function loadProjectBuckets(projectName) {
            try {
                console.log('Loading buckets for:', projectName);
                const response = await fetch(`${API_BASE}/projects/${projectName}/buckets/buckets`);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('Buckets data:', data);
                    projectBuckets[projectName] = Array.isArray(data) ? data : [];
                } else {
                    console.warn('Failed to load buckets:', response.status);
                    projectBuckets[projectName] = [];
                }
            } catch (error) {
                console.error('Error loading buckets:', error);
                projectBuckets[projectName] = [];
            }
        }

        // Load project tables
        async function loadProjectTables(projectName) {
            try {
                console.log('Loading tables for:', projectName);
                const response = await fetch(`${API_BASE}/projects/${projectName}/tables/tables/list?project=${projectName}`);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('Tables data:', data);
                    projectTables[projectName] = Array.isArray(data) ? data : [];
                } else {
                    console.warn('Failed to load tables:', response.status);
                    projectTables[projectName] = [];
                }
            } catch (error) {
                console.error('Error loading tables:', error);
                projectTables[projectName] = [];
            }
        }

        // Update source toggles in all areas
        function updateSourceToggles() {
            updateMainSourceToggles();
            updateToolSourceToggles('brainstorm');
            updateToolSourceToggles('write');
            updateToolSourceToggles('edit');
        }

        // Update main sidebar source toggles
        function updateMainSourceToggles() {
            const buckets = projectBuckets[currentProject] || [];
            const tables = projectTables[currentProject] || [];
            
            updateToggleSection('documentSources', buckets, 'documents');
            updateToggleSection('tableSources', tables, 'tables');
        }

        // Update tool-specific source toggles
        function updateToolSourceToggles(tool) {
            const buckets = projectBuckets[currentProject] || [];
            const tables = projectTables[currentProject] || [];
            
            updateToggleSection(`${tool}Documents`, buckets, 'documents');
            updateToggleSection(`${tool}Tables`, tables, 'tables');
        }

        // Update toggle section
        function updateToggleSection(containerId, items, type) {
            const container = document.getElementById(containerId);
            if (!container) return;
            
            container.innerHTML = '';
            
            if (items.length === 0) {
                container.innerHTML = '<div style="color: #8b8b8b; font-size: 12px; text-align: center; padding: 8px;">None available</div>';
                return;
            }
            
            items.forEach(item => {
                const itemName = typeof item === 'string' ? item : (item.name || item.bucket || 'Unknown');
                const toggleItem = document.createElement('div');
                toggleItem.className = 'toggle-item';
                
                const isSelected = selectedSources[type].has(itemName);
                
                toggleItem.innerHTML = `
                    <label onclick="toggleSource('${type}', '${itemName}')">${itemName}</label>
                    <div class="toggle-switch ${isSelected ? 'active' : ''}" onclick="toggleSource('${type}', '${itemName}')"></div>
                `;
                
                container.appendChild(toggleItem);
            });
        }

        // Toggle source selection
        function toggleSource(type, name) {
            const sources = selectedSources[type];
            
            if (sources.has(name)) {
                sources.delete(name);
            } else {
                sources.add(name);
            }
            
            console.log(`Toggled ${type} source "${name}". Current selection:`, Array.from(sources));
            updateSourceToggles();
        }

        // Toggle all documents
        function toggleAllDocuments() {
            const buckets = projectBuckets[currentProject] || [];
            const currentlySelected = selectedSources.documents.size;
            
            if (currentlySelected === buckets.length) {
                // All selected, deselect all
                selectedSources.documents.clear();
            } else {
                // Not all selected, select all
                buckets.forEach(bucket => {
                    const bucketName = typeof bucket === 'string' ? bucket : (bucket.name || bucket.bucket);
                    selectedSources.documents.add(bucketName);
                });
            }
            
            updateSourceToggles();
        }

        // Toggle all tables
        function toggleAllTables() {
            const tables = projectTables[currentProject] || [];
            const currentlySelected = selectedSources.tables.size;
            
            if (currentlySelected === tables.length) {
                // All selected, deselect all
                selectedSources.tables.clear();
            } else {
                // Not all selected, select all
                tables.forEach(table => {
                    const tableName = typeof table === 'string' ? table : table.name;
                    selectedSources.tables.add(tableName);
                });
            }
            
            updateSourceToggles();
        }

        // Tab switching
        function switchTab(tabName) {
            // Update tab buttons
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Hide all tab content
            document.querySelectorAll('[id$="Tab"]').forEach(content => {
                content.classList.add('hidden');
            });
            
            // Show selected tab
            document.getElementById(tabName + 'Tab').classList.remove('hidden');
            
            console.log('Switched to tab:', tabName);
        }

        // Project selection handlers
        document.addEventListener('change', function(e) {
            if (e.target.id === 'projectSelect') {
                const projectName = e.target.value;
                if (projectName) {
                    loadProjectData(projectName);
                }
            }
        });

        // Chat functionality
        async function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            
            if (!message) return;
            if (!currentProject) {
                showError('Please select a project first');
                return;
            }
            
            // Add user message
            addMessage(message, 'user');
            input.value = '';
            input.style.height = 'auto';
            
            // Show typing indicator
            const typingId = addMessage('Miranda is thinking...', 'assistant');
            
            try {
                // Get response from Miranda
                const response = await fetch(`${API_BASE}/projects/${currentProject}/chat`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: message,
                        sources: {
                            buckets: Array.from(selectedSources.documents),
                            tables: Array.from(selectedSources.tables)
                        }
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    removeMessage(typingId);
                    addMessage(data.response || 'No response received', 'assistant');
                } else {
                    removeMessage(typingId);
                    addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
                }
            } catch (error) {
                console.error('Chat error:', error);
                removeMessage(typingId);
                addMessage('Sorry, I couldn\'t connect to the server.', 'assistant');
            }
        }

        // Add message to chat
        function addMessage(content, sender) {
            const messagesArea = document.getElementById('messagesArea');
            const messageId = 'msg_' + Date.now();
            
            const messageDiv = document.createElement('div');
            messageDiv.id = messageId;
            messageDiv.className = `message ${sender}`;
            messageDiv.innerHTML = `<div class="message-content">${content}</div>`;
            
            messagesArea.appendChild(messageDiv);
            messagesArea.scrollTop = messagesArea.scrollHeight;
            
            return messageId;
        }

        // Remove message from chat
        function removeMessage(messageId) {
            const message = document.getElementById(messageId);
            if (message) {
                message.remove();
            }
        }

        // Brainstorm functionality
        async function generateBrainstorm() {
            const projectSelect = document.getElementById('brainstormProjectSelect');
            const topicInput = document.getElementById('brainstormTopic');
            const resultsDiv = document.getElementById('brainstormResults');
            
            const project = projectSelect.value;
            const topic = topicInput.value.trim();
            
            if (!project) {
                showError('Please select a project');
                return;
            }
            
            if (!topic) {
                showError('Please enter a topic');
                return;
            }
            
            resultsDiv.textContent = 'Generating ideas...';
            
            try {
                const response = await fetch(`${API_BASE}/projects/${project}/brainstorm`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        focus: topic,
                        sources: {
                            buckets: Array.from(selectedSources.documents),
                            tables: Array.from(selectedSources.tables)
                        }
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    resultsDiv.textContent = data.result || 'No ideas generated';
                } else {
                    resultsDiv.textContent = 'Error generating ideas. Please try again.';
                }
            } catch (error) {
                console.error('Brainstorm error:', error);
                resultsDiv.textContent = 'Error connecting to server.';
            }
        }

        // Write functionality
        async function generateWrite() {
            const projectSelect = document.getElementById('writeProjectSelect');
            const promptInput = document.getElementById('writePrompt');
            const resultsDiv = document.getElementById('writeResults');
            
            const project = projectSelect.value;
            const prompt = promptInput.value.trim();
            
            if (!project) {
                showError('Please select a project');
                return;
            }
            
            if (!prompt) {
                showError('Please enter a writing prompt');
                return;
            }
            
            resultsDiv.textContent = 'Generating content...';
            
            try {
                const response = await fetch(`${API_BASE}/projects/${project}/write`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        prompt: prompt,
                        sources: {
                            buckets: Array.from(selectedSources.documents),
                            tables: Array.from(selectedSources.tables)
                        }
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    resultsDiv.textContent = data.result || 'No content generated';
                } else {
                    resultsDiv.textContent = 'Error generating content. Please try again.';
                }
            } catch (error) {
                console.error('Write error:', error);
                resultsDiv.textContent = 'Error connecting to server.';
            }
        }

        // Edit functionality
        async function generateEdit() {
            const projectSelect = document.getElementById('editProjectSelect');
            const contentInput = document.getElementById('editContent');
            const resultsDiv = document.getElementById('editResults');
            
            const project = projectSelect.value;
            const content = contentInput.value.trim();
            
            if (!project) {
                showError('Please select a project');
                return;
            }
            
            if (!content) {
                showError('Please enter content to edit');
                return;
            }
            
            resultsDiv.textContent = 'Improving content...';
            
            try {
                const response = await fetch(`${API_BASE}/projects/${project}/edit`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        content: content,
                        sources: {
                            buckets: Array.from(selectedSources.documents),
                            tables: Array.from(selectedSources.tables)
                        }
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    resultsDiv.textContent = data.result || 'No improvements generated';
                } else {
                    resultsDiv.textContent = 'Error improving content. Please try again.';
                }
            } catch (error) {
                console.error('Edit error:', error);
                resultsDiv.textContent = 'Error connecting to server.';
            }
        }

        // Data management functions
        async function createBucket() {
            const bucketInput = document.getElementById('bucketName');
            const bucketName = bucketInput.value.trim();
            
            if (!bucketName) {
                showError('Please enter a bucket name');
                return;
            }
            
            if (!currentProject) {
                showError('Please select a project first');
                return;
            }
            
            try {
                const response = await fetch(`${API_BASE}/projects/${currentProject}/buckets/buckets/new`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ bucket: bucketName })
                });
                
                if (response.ok) {
                    bucketInput.value = '';
                    await loadProjectBuckets(currentProject);
                    updateSourceToggles();
                    showSuccess('Bucket created successfully');
                } else {
                    showError('Failed to create bucket');
                }
            } catch (error) {
                console.error('Create bucket error:', error);
                showError('Error creating bucket');
            }
        }

        // Document upload
        function handleDocumentUpload(event) {
            const files = event.target.files;
            if (files.length === 0) return;
            
            if (!currentProject) {
                showError('Please select a project first');
                return;
            }
            
            // For now, just show files selected
            console.log('Files selected for upload:', files);
            showSuccess(`${files.length} file(s) selected. Upload functionality coming soon.`);
        }

        // CSV upload
        function uploadCSV() {
            document.getElementById('csvUpload').click();
        }

        function handleCSVUpload(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const tableNameInput = document.getElementById('tableName');
            const tableName = tableNameInput.value.trim();
            
            if (!tableName) {
                showError('Please enter a table name');
                return;
            }
            
            if (!currentProject) {
                showError('Please select a project first');
                return;
            }
            
            console.log('CSV selected for upload:', file.name, 'as table:', tableName);
            showSuccess('CSV upload functionality coming soon.');
        }

        // Utility functions
        function showError(message) {
            alert('Error: ' + message);
        }

        function showSuccess(message) {
            console.log('Success:', message);
        }

        // Make functions available for testing
        window.testProjectAPI = testProjectAPI;
        window.checkDropdown = checkDropdown;
        window.refreshProjects = refreshProjects;
    </script>
</body>
</html>
